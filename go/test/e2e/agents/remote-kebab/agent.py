import logging

from google.adk.agents.invocation_context import InvocationContext
from google.adk.events.event import Event
from google.adk.agents.base_agent import BaseAgent
from typing import AsyncGenerator, override
from google.genai import types
from a2a.types import AgentCard, AgentSkill
from google.adk.a2a.utils.agent_to_a2a import to_a2a

logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)


class RemoteKebabAgent(BaseAgent):
    def __init__(self):
        super().__init__(
            name="remote_kebab_agent",
            description="Remote kebab agent that responds with 'kebab' when invoked.",
        )

    @override
    async def _run_async_impl(
        self, ctx: InvocationContext
    ) -> AsyncGenerator[Event, None]:
        """Core logic to run this agent via text-based conversation.

        Args:
          ctx: InvocationContext, the invocation context for this agent.

        Yields:
          Event: the events generated by the agent.
        """
        session = ctx.session
        text = f"remote kebab for {session.user_id} in session {session.id} "

        logger.info(f"Generating response: {text}")

        model_response_event = Event(
            id=Event.new_id(),
            invocation_id=ctx.invocation_id,
            author=ctx.agent.name,
            branch=ctx.branch,
            content=types.ModelContent(parts=[types.Part.from_text(text=text)]),
        )
        yield model_response_event


root_agent = RemoteKebabAgent()

agent_card = AgentCard(
    name="remote-kebab-agent",
    description="A remote kebab agent",
    url="http://remote-kebab-agent.remote.svc.cluster.local:8080",
    version="0.0.1",
    capabilities={"streaming": True, "push_notifications": False, "state_transition_history": True},
    defaultInputModes=["text"],
    defaultOutputModes=["text"],
    skills=[
        AgentSkill(
            id="remote-kebab-agent",
            name="Remote Kebab",
            description="A remote kebab agent that responds with 'kebab'",
            tags=["remote", "kebab", "test"],
        ),
    ],
)

a2a_app = to_a2a(root_agent, agent_card=agent_card)

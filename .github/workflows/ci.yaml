name: CI Build

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  build:
    env:
      VERSION: v0.0.1-test
    strategy:
      matrix:
        image:
          - controller
          - ui
          - app
          - cli
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64
          version: v0.23.0
          use: 'true'
      - name: Run make build
        env:
          DOCKER_BUILDKIT: 1
          DOCKER_BUILD_ARGS: >-
            --cache-from=type=gha
            --cache-to=type=gha,mode=max
            --platform=linux/amd64,linux/arm64
            --output=type=tar,dest=/dev/null

          DOCKER_BUILDER: "docker buildx"
        run: make build-${{ matrix.image }}
        working-directory: ./
    # - name: Upload artifact
    #   uses: actions/upload-artifact@v4
    #   with:
    #     name: ${{matrix.image}}.tar
    #     path: ${{ runner.temp }}

  e2e-test:
    env:
      VERSION: v0.0.1-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Helm
        uses: azure/setup-helm@v4.2.0
        with:
          version: v3.17.0

      - name: Create k8s Kind Cluster
        uses: helm/kind-action@v1
        with:
          cluster_name: kagent

      # This allows us to not rely on port-forwarding which is flaky
      - name: Setup Metallb
        run: |
          bash scripts/kind/setup-metallb.sh

      - name: Install Kagent
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          make helm-install
          kubectl wait --for=condition=Accepted  agents.kagent.dev -n kagent --all --timeout=60s

      - name: Run e2e tests
        run: |
          export GW_IP=$(kubectl get svc -n kagent kagent -o jsonpath='{.items[*].status.loadBalancer.ingress[*].ip}')
          cd go
          echo "What pods are running in the cluster?" | go run cli/cmd/kagent/main.go --api-url "http://${GW_IP}:8081/api" invoke -a kagent/k8s-agent -t -

  go-unit-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.24"
          cache: true

      - name: Run cmd/main.go tests
        working-directory: go
        run: |
          go test -skip 'TestInvokeAPI|TestE2E|TestAutogenClient' -v ./...

  helm-unit-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Helm
        uses: azure/setup-helm@v4.2.0
        with:
          version: v3.17.0
      # Install unittest plugin
      - name: Install unittest plugin
        run: |
          helm plugin install https://github.com/helm-unittest/helm-unittest

      - name: Chart init
        run: |
          make helm-version

      - name: Run helm unit tests
        run: |
          helm unittest helm/kagent

  python-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5

      - name: Install python
        run: uv python install 3.12
        working-directory: ./python

      - name: Sync dependencies
        working-directory: ./python
        run: |
          export GIT_LFS_SKIP_SMUDGE=1
          uv sync --all-extras

      - name: Run tests
        working-directory: ./python
        run: uv run pytest tests

  ui-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: ui/package-lock.json

      - name: Install dependencies
        working-directory: ./ui
        run: npm ci

      - name: Run tests
        working-directory: ./ui
        run: npm run test

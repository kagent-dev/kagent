apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "kagent.fullname" . }}-controller
  namespace: {{ include "kagent.namespace" . }}
  labels:
    {{- include "kagent.controller.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.controller.replicas }}
  selector:
    matchLabels:
      {{- include "kagent.controller.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        {{- with .Values.controller.podAnnotations }}
          {{- toYaml . | nindent 8 }}
        {{- end }}
      labels:
        {{- include "kagent.controller.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.controller.imagePullSecrets | default .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      securityContext:
        {{- toYaml (.Values.controller.podSecurityContext | default .Values.podSecurityContext) | nindent 8 }}
      serviceAccountName: {{ include "kagent.fullname" . }}-controller
      volumes:
      - name: sqlite-volume
        emptyDir:
          sizeLimit: 500Mi
          medium: Memory
      containers:
        - name: controller
          args:
          # Consider using env vars (stored in a dedicated ConfigMap(s)) rather than this
          {{/* #we need to pass the default model config name to the app otherwise helm upgrade will not allow provider type change due to validations */}}
            - -default-model-config-name
            - {{ include "kagent.defaultModelConfigName" . | quote }}
            - -zap-log-level
            - {{ .Values.controller.loglevel }}
            - -watch-namespaces
            - "{{ include "kagent.watchNamespaces" . }}"
            - -autogen-base-url
            - "http://{{ include "kagent.fullname" . }}-engine.{{ include "kagent.namespace" . }}.svc.cluster.local:{{ .Values.engine.service.ports.port }}/api"
            - -database-type
            - {{ .Values.controller.database.type }}
            {{- if eq .Values.controller.database.type "sqlite" }}
            - -sqlite-database-path
            - /sqlite-volume/{{ .Values.controller.database.sqlite.databaseName }}
            {{- else if eq .Values.controller.database.type "postgres" }}
            - -postgres-database-url
            - {{ .Values.controller.database.postgres.url }}
            {{- end }}          
          securityContext:
            {{- toYaml .Values.controller.securityContext | nindent 12 }}
          image: "{{ .Values.controller.image.registry }}/{{ .Values.controller.image.repository }}:{{ coalesce .Values.tag .Values.controller.image.tag .Chart.Version }}"
          imagePullPolicy: {{ .Values.controller.image.pullPolicy | default .Values.imagePullPolicy }}
          resources:
            {{- toYaml .Values.controller.resources | nindent 12 }}
          env:
            - name: LOG_LEVEL
              value: {{ .Values.controller.loglevel | quote }}
            - name: OTEL_TRACING_ENABLED
              value: {{ .Values.otel.tracing.enabled | quote }}
            - name: OTEL_EXPORTER_OTLP_ENDPOINT
              value: {{ .Values.otel.tracing.exporter.otlp.endpoint | quote }}
            - name: OTEL_EXPORTER_OTLP_TRACES_TIMEOUT
              value: {{ .Values.otel.tracing.exporter.otlp.timeout | quote }}
            - name: OTEL_EXPORTER_OTLP_TRACES_INSECURE
              value: {{ .Values.otel.tracing.exporter.otlp.insecure | quote }}
            - name: KAGENT_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            {{- with .Values.controller.env }}
              {{- toYaml . | nindent 12 }}
            {{- end }}
          ports:
            - name: http
              containerPort: {{ .Values.controller.service.ports.targetPort }}
              protocol: TCP
          readinessProbe:
            tcpSocket:
              port: http
            initialDelaySeconds: 15
            periodSeconds: 15
          volumeMounts:
            - name: sqlite-volume
              mountPath: /sqlite-volume

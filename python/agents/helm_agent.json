{
  "provider": "autogen_agentchat.teams.RoundRobinGroupChat",
  "component_type": "team",
  "version": 1,
  "component_version": 1,
  "description": "A Kubernetes agent which knows how to do Kubernetes things",
  "config": {
    "participants": [
      {
        "component_type": "agent",
        "component_version": 1,
        "config": {
          "description": "An agent which runs a team of agents",
          "team": {
            "component_type": "team",
            "component_version": 1,
            "config": {
              "participants": [
                {
                  "provider": "autogen_agentchat.agents.AssistantAgent",
                  "component_type": "agent",
                  "version": 1,
                  "component_version": 1,
                  "description": "An agent that provides assistance with tool use.",
                  "label": "Helm Agent",
                  "config": {
                    "name": "helm_agent",
                    "model_client": {
                      "provider": "autogen_ext.models.openai.OpenAIChatCompletionClient",
                      "component_type": "model",
                      "version": 1,
                      "component_version": 1,
                      "description": "Chat completion client for OpenAI hosted models.",
                      "label": "OpenAIChatCompletionClient",
                      "config": {
                        "model": "gpt-4o"
                      }
                    },
                    "tools": [
                      {
                        "provider": "kagent.tools.helm.ListReleases",
                        "component_type": "tool",
                        "version": 1,
                        "component_version": 1,
                        "description": "\nThis command lists all of the releases for a specified namespace (uses current namespace context if namespace not specified).\n\nBy default, it lists only releases that are deployed or failed. Flags like\n'--uninstalled' and '--all' will alter this behavior. Such flags can be combined:\n'--uninstalled --failed'.\n\nBy default, items are sorted alphabetically. Use the '-d' flag to sort by\nrelease date.\n\nIf the --filter flag is provided, it will be treated as a filter. Filters are\nregular expressions (Perl compatible) that are applied to the list of releases.\nOnly items that match the filter will be returned.\n\n    $ helm list --filter 'ara[a-z]+'\n    NAME                UPDATED                                  CHART\n    maudlin-arachnid    2020-06-18 14:17:46.125134977 +0000 UTC  alpine-0.1.0\n    ",
                        "label": "ListReleases",
                        "config": {}
                      },
                      {
                        "provider": "kagent.tools.helm.GetRelease",
                        "component_type": "tool",
                        "version": 1,
                        "component_version": 1,
                        "description": "\nThis command consists of multiple subcommands which can be used to\nget extended information about the release, including:\n\n- The values used to generate the release\n- The generated manifest file\n- The notes provided by the chart of the release\n- The hooks associated with the release\n\nAvailable specifiers:\n  all         download all information for a named release\n  hooks       download all hooks for a named release\n  manifest    download the manifest for a named release. The manifest is a YAML-formatted\n               file containing the complete state of the release.\n  notes       download the notes for a named release. The notes are a text\n               document that contains information about the release.\n  values      download the values file for a named release. The values are a\n               YAML-formatted file containing the values used to generate the\n               release.\n",
                        "label": "GetRelease",
                        "config": {}
                      },
                      {
                        "provider": "kagent.tools.helm.Upgrade",
                        "component_type": "tool",
                        "version": 1,
                        "component_version": 1,
                        "description": "\nThis command upgrades a release to a new version of a chart.\n\nThe upgrade arguments must be a release and chart. The chart\nargument can be either: a chart reference('example/mariadb'), a path to a chart directory,\na packaged chart, or a fully qualified URL. For chart references, the latest\nversion will be specified unless the '--version' flag is set.\n\nTo override values in a chart, use either the '--values' flag and pass in a file\nor use the '--set' flag and pass configuration from the command line, to force string\nvalues, use '--set-string'. You can use '--set-file' to set individual\nvalues from a file when the value itself is too long for the command line\nor is dynamically generated. You can also use '--set-json' to set json values\n(scalars/objects/arrays) from the command line.\n\nYou can specify the '--values'/'-f' flag multiple times. The priority will be given to the\nlast (right-most) file specified. For example, if both myvalues.yaml and override.yaml\ncontained a key called 'Test', the value set in override.yaml would take precedence:\n\n    $ helm upgrade -f myvalues.yaml -f override.yaml redis ./redis\n\nYou can specify the '--set' flag multiple times. The priority will be given to the\nlast (right-most) set specified. For example, if both 'bar' and 'newbar' values are\nset for a key called 'foo', the 'newbar' value would take precedence:\n\n    $ helm upgrade --set foo=bar --set foo=newbar redis ./redis\n\nThere are six different ways you can express the chart you want to install:\n\n1. By chart reference: helm install mymaria example/mariadb\n2. By path to a packaged chart: helm install mynginx ./nginx-1.2.3.tgz\n3. By path to an unpacked chart directory: helm install mynginx ./nginx\n4. By absolute URL: helm install mynginx https://example.com/charts/nginx-1.2.3.tgz\n5. By chart reference and repo url: helm install --repo https://example.com/charts/ mynginx nginx\n6. By OCI registries: helm install mynginx --version 1.2.3 oci://example.com/charts/nginx\n\nCHART REFERENCES\n\nA chart reference is a convenient way of referencing a chart in a chart repository.\n\nWhen you use a chart reference with a repo prefix ('example/mariadb'), Helm will look in the local\nconfiguration for a chart repository named 'example', and will then look for a\nchart in that repository whose name is 'mariadb'. It will install the latest stable version of that chart\nuntil you specify '--devel' flag to also include development version (alpha, beta, and release candidate releases), or\nsupply a version number with the '--version' flag.\n\nTo see the list of chart repositories, use 'helm repo list'. To search for\ncharts in a repository, use 'helm search'.\n",
                        "label": "Upgrade",
                        "config": {}
                      },
                      {
                        "provider": "kagent.tools.helm.Uninstall",
                        "component_type": "tool",
                        "version": 1,
                        "component_version": 1,
                        "description": "\nThis command takes a release name and uninstalls the release.\n\nIt removes all of the resources associated with the last release of the chart\nas well as the release history, freeing it up for future use.\n\nUse the '--dry-run' flag to see which releases will be uninstalled without actually\nuninstalling them.\n\nUsage:\n  helm uninstall RELEASE_NAME [...] [flags]\n\n",
                        "label": "Uninstall",
                        "config": {}
                      },
                      {
                        "provider": "kagent.tools.k8s.GetResources",
                        "component_type": "tool",
                        "version": 1,
                        "component_version": 1,
                        "description": "Get information about resources in Kubernetes. Always prefer output type `wide` unless otherwise specified. 'all' is NOT an option, you must specify a resource type.",
                        "label": "GetResources",
                        "config": {}
                      },
                      {
                        "provider": "kagent.tools.k8s.GetAvailableAPIResources",
                        "component_type": "tool",
                        "version": 1,
                        "component_version": 1,
                        "description": "Gets the supported API resources in Kubernetes.",
                        "label": "GetAvailableAPIResources",
                        "config": {}
                      },
                      {
                        "provider": "kagent.tools.k8s.ApplyManifest",
                        "component_type": "tool",
                        "version": 1,
                        "component_version": 1,
                        "description": "Apply a YAML resource file to the Kubernetes cluster.",
                        "label": "ApplyManifest",
                        "config": {}
                      },
                      {
                        "provider": "kagent.tools.docs.QueryTool",
                        "component_type": "tool",
                        "version": 1,
                        "component_version": 1,
                        "description": "Tool for querying documentation for a specific product.",
                        "label": "QueryTool",
                        "config": {
                          "docs_base_path": "",
                          "docs_download_url": "https://doc-sqlite-db.s3.sa-east-1.amazonaws.com"
                        }
                      }
                    ],
                    "handoffs": [],
                    "model_context": {
                      "provider": "autogen_core.model_context.UnboundedChatCompletionContext",
                      "component_type": "chat_completion_context",
                      "version": 1,
                      "component_version": 1,
                      "description": "An unbounded chat completion context that keeps a view of the all the messages.",
                      "label": "UnboundedChatCompletionContext",
                      "config": {}
                    },
                    "description": "\n    A Kubernetes operations specialist that can:\n    - Manage Helm releases (list, get, upgrade, uninstall)\n    - Handle K8s resources (get, describe, apply)\n    - Search and interpret K8s documentation\n    - Validate configurations and operations\n    Ideal for cluster management, deployment handling, and resource operations.\n    ",
                    "system_message": "\n    You are a Kubernetes expert agent specialized in cluster management and operations. Your primary responsibilities include:\n\n    1. Helm Operations:\n       - Managing Helm releases (list, get details, upgrade, and uninstall)\n       - Understanding Helm chart structures and dependencies\n       - Validating release states and configurations\n\n    2. Kubernetes Resource Management:\n       - Monitoring and managing various Kubernetes resources (Pods, Deployments, Services, etc.)\n       - Analyzing resource configurations and relationships\n       - Applying and validating Kubernetes manifests\n       - Understanding API resource availability and versioning\n\n    3. Documentation and Troubleshooting:\n       - Accessing and interpreting Kubernetes and related project documentation\n       - Providing context-aware recommendations\n       - Identifying potential issues in configurations\n\n    Always follow these principles:\n    - Validate operations before execution\n    - Provide clear explanations for your actions\n    - Consider security implications\n    - Follow Kubernetes best practices\n    - Use appropriate tools based on the context\n\n    When handling tasks:\n    1. First analyze the current state\n    2. Plan your actions\n    3. Execute with appropriate tools\n    4. Verify results\n    5. Report outcomes clearly\n    ",
                    "model_client_stream": true,
                    "reflect_on_tool_use": false,
                    "tool_call_summary_format": "{result}"
                  }
                }
              ],
              "termination_condition": {
                "component_type": "termination",
                "component_version": 1,
                "config": {
                  "source": "helm_agent"
                },
                "description": "Terminate the conversation if a specific text is mentioned.",
                "label": "TextMessageTermination",
                "provider": "kagent.terminations.TextMessageTermination",
                "version": 1
              }
            },
            "description": "A team of agents",
            "label": "RoundRobinGroupChat",
            "provider": "autogen_agentchat.teams.RoundRobinGroupChat",
            "version": 1
          },
          "model_client": {
            "config": {
              "model": "gpt-4o"
            },
            "description": "Chat completion client for model.",
            "label": "OpenAIChatCompletionClient",
            "provider": "autogen_ext.models.openai.OpenAIChatCompletionClient",
            "version": 1
          },
          "model_context": {
            "component_type": "model",
            "component_version": 1,
            "config": {},
            "description": "An unbounded chat completion context that keeps a view of the all the messages.",
            "label": "UnboundedChatCompletionContext",
            "provider": "autogen_core.model_context.UnboundedChatCompletionContext",
            "version": 1
          },
          "name": "society_of_mind_agent",
          "model_client_stream": true
        },
        "description": "An agent which runs a team of agents",
        "label": "society_of_mind_agent",
        "provider": "kagent.agents.SocietyOfMindAgent",
        "version": 1
      },
      {
        "component_type": "agent",
        "component_version": 1,
        "config": {
          "description": "Human user",
          "name": "kagent_user"
        },
        "description": "An agent that represents a user.",
        "label": "kagent_user",
        "provider": "autogen_agentchat.agents.UserProxyAgent",
        "version": 1
      }
    ],
    "termination_condition": {
      "component_type": "termination",
      "component_version": 1,
      "config": {
        "text": "TERMINATE"
      },
      "description": "Terminate the conversation if a stop message is received.",
      "label": "TextMentionTermination",
      "provider": "autogen_agentchat.conditions.TextMentionTermination",
      "version": 1
    }
  },
  "label": "Helm Agent"
}
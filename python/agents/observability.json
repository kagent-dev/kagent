{
  "provider": "autogen_agentchat.teams.RoundRobinGroupChat",
  "component_type": "team",
  "version": 1,
  "component_version": 1,
  "description": "Observability Agent",
  "label": "Observability Agent",
  "config": {
    "participants": [
      {
        "provider": "kagent.agents.TaskAgent",
        "component_type": "agent",
        "version": 1,
        "component_version": 1,
        "description": "An agent which runs a team of agents",
        "label": "society_of_mind_agent",
        "config": {
          "name": "society_of_mind_agent",
          "team": {
            "provider": "autogen_agentchat.teams.RoundRobinGroupChat",
            "component_type": "team",
            "version": 1,
            "component_version": 1,
            "description": "Observability Agent",
            "label": "RoundRobinGroupChat",
            "config": {
              "participants": [
                {
                  "provider": "autogen_agentchat.agents.AssistantAgent",
                  "component_type": "agent",
                  "version": 1,
                  "component_version": 1,
                  "description": "This is an example agent that combines Kubernetes, Prometheus and Grafana tools.",
                  "label": "Sample Observability Agent",
                  "config": {
                    "name": "observability",
                    "model_client": {
                      "provider": "autogen_ext.models.openai.OpenAIChatCompletionClient",
                      "component_type": "model",
                      "version": 1,
                      "component_version": 1,
                      "description": "Chat completion client for OpenAI hosted models.",
                      "label": "OpenAIChatCompletionClient",
                      "config": { "model": "gpt-4o", "stream_options": { "include_usage": true } }
                    },
                    "tools": [
                      {
                        "provider": "kagent.tools.k8s.GetResources",
                        "description": "Get information about resources in Kubernetes. Always prefer output type `wide` unless otherwise specified. 'all' is NOT an option, you must specify a resource type.",
                        "component_type": "tool",
                        "component_version": 1,
                        "version": 1,
                        "label": "GetResources",
                        "config": {}
                      },
                      {
                        "provider": "kagent.tools.k8s.GetAvailableAPIResources",
                        "description": "Gets the supported API resources in Kubernetes.",
                        "component_type": "tool",
                        "component_version": 1,
                        "version": 1,
                        "label": "GetAvailableAPIResources",
                        "config": {}
                      },
                      {
                        "provider": "kagent.tools.prometheus.QueryTool",
                        "description": "Executes instant queries against Prometheus to retrieve current metric values.\n        Use this tool when you need to get the latest values of metrics or perform calculations on current data.\n        The query must be a valid PromQL expression.",
                        "component_type": "tool",
                        "component_version": 1,
                        "version": 1,
                        "label": "QueryTool",
                        "config": { "base_url": "http://localhost:9090/api/v1", "username": "", "password": "" }
                      },
                      {
                        "provider": "kagent.tools.prometheus.GeneratePromQLTool",
                        "description": "GeneratePromQLTool generates PromQL queries from natural language descriptions.",
                        "component_type": "tool",
                        "component_version": 1,
                        "version": 1,
                        "label": "GeneratePromQLTool",
                        "config": { "model": "gpt-4o", "openai_api_key": "", "temperature": 0 }
                      },
                      {
                        "provider": "kagent.tools.grafana.DashboardManagementTool",
                        "description": "Perform various operations on Grafana dashboards including:\n    - search: Search for dashboards with filtering and pagination\n    - get: Retrieve a specific dashboard by UID\n    - create/update: Create a new dashboard or update an existing one\n    - delete: Delete a dashboard by UID\n    - get_versions: List all versions of a dashboard\n    - get_version: Retrieve a specific version of a dashboard\n    - restore_version: Restore a dashboard to a previous version\n    - get_permissions: Get dashboard permissions\n    - update_permissions: Update dashboard permissions\n    - calculate_diff: Calculate difference between dashboard versions\n    ",
                        "component_type": "tool",
                        "component_version": 1,
                        "version": 1,
                        "label": "DashboardManagementTool",
                        "config": { "base_url": "http://localhost:3000/api", "username": "", "password": "", "api_key": "" }
                      }
                    ],
                    "handoffs": [],
                    "model_context": {
                      "provider": "autogen_core.model_context.UnboundedChatCompletionContext",
                      "component_type": "chat_completion_context",
                      "version": 1,
                      "component_version": 1,
                      "description": "An unbounded chat completion context that keeps a view of the all the messages.",
                      "label": "UnboundedChatCompletionContext",
                      "config": {}
                    },
                    "description": "This is an example agent that combines Kubernetes, Prometheus and Grafana tools.",
                    "system_message": "You're a friendly and helpful agent that uses tools to help users with observability questions. You have access to the following tools:\n\n- Kubernetes tools to verify existence of services, pods and other resources\n- PromQL query generator tool that knows how to create a valid PromQL from user queries\n- Prometheus tools to query Prometheus for metrics, labels\n- Grafana tools for creating and managing dashboards\n\n# Instructions\n- If user question is unclear, ask for clarification before running any tools\n- Always be helpful and friendly\n- If you don't know how to answer the question DO NOT make things up, tell the user \"Sorry, I don't know how to answer that\" and ask them to clarify the question further\n- Before creating any Prometheus queries or Grafana dashboards make sure the actual resources exist in Kubernetes. For example, if a user asks for metrics for a service, you will use Kubernetes to to verify whether the resource exists before creating any queries or dashboards.\n\n# Response format\n- ALWAYS format your response as Markdown\n- Your response will include a summary of actions you took and an explanation of the result\n- If you created any artifacts such as files or resources, you will include those in your response as well  ",
                    "reflect_on_tool_use": false,
                    "tool_call_summary_format": "{result}",
                    "model_client_stream": true
                  }
                }
              ],
              "termination_condition": {
                "provider": "kagent.terminations.TextMessageTermination",
                "component_type": "termination",
                "version": 1,
                "component_version": 1,
                "description": "Terminate the conversation if a specific text is mentioned.",
                "label": "TextMessageTermination",
                "config": { "source": "observability" }
              },
              "model_client": {
                "provider": "autogen_ext.models.openai.OpenAIChatCompletionClient",
                "component_type": "model",
                "version": 1,
                "component_version": 1,
                "description": "Chat completion client for OpenAI hosted models.",
                "label": "OpenAIChatCompletionClient",
                "config": { "model": "gpt-4o", "stream_options": { "include_usage": true } }
              }
            }
          },
          "model_client": {
            "provider": "autogen_ext.models.openai.OpenAIChatCompletionClient",
            "component_type": "model",
            "version": 1,
            "component_version": 1,
            "description": "Chat completion client for OpenAI hosted models.",
            "label": "OpenAIChatCompletionClient",
            "config": { "model": "gpt-4o", "stream_options": { "include_usage": true } }
          },
          "model_context": {
            "provider": "autogen_core.model_context.UnboundedChatCompletionContext",
            "component_type": "chat_completion_context",
            "version": 1,
            "component_version": 1,
            "description": "An unbounded chat completion context that keeps a view of the all the messages.",
            "label": "UnboundedChatCompletionContext",
            "config": {}
          },
          "model_client_stream": true
        }
      },
      {
        "provider": "autogen_agentchat.agents.UserProxyAgent",
        "component_type": "agent",
        "version": 1,
        "component_version": 1,
        "description": "An agent that represents a user.",
        "label": "kagent_user",
        "config": { "name": "kagent_user", "description": "Human user" }
      }
    ],
    "termination_condition": {
      "provider": "autogen_agentchat.conditions.TextMentionTermination",
      "component_type": "termination",
      "version": 1,
      "component_version": 1,
      "description": "Terminate the conversation if a specific text is mentioned.",
      "label": "TextMentionTermination",
      "config": { "text": "TERMINATE" }
    },
    "model_client": {
      "provider": "autogen_ext.models.openai.OpenAIChatCompletionClient",
      "component_type": "model",
      "version": 1,
      "component_version": 1,
      "description": "Chat completion client for OpenAI hosted models.",
      "label": "OpenAIChatCompletionClient",
      "config": { "model": "gpt-4o", "stream_options": { "include_usage": true } }
    }
  }
}
